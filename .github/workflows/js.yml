name: JS build

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          submodules: true

      - uses: dorny/paths-filter@v2.10.2
        id: changes
        with:
          filters: |
            js:
              - src/**
              - "*.json"
              - ".nvmrc"
              - "tests/*/psp.yaml"
              - "tests/*/*-helper.yaml"
              - .github/workflows/js.yaml

      - uses: actions/setup-node@v2.5.0
        if: steps.changes.outputs.js == 'true'
        with:
          node-version-file: '.nvmrc'
      - run: npm install
        if: steps.changes.outputs.js == 'true'
      - run: node_modules/.bin/jest --json --outputFile=result.json --testLocationInResults
        if: steps.changes.outputs.js == 'true'
      - uses: tanmen/jest-reporter@v1
        if: steps.changes.outputs.js == 'true' && always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: npm run build
        if: steps.changes.outputs.js == 'true'

      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-alpine-arm64
          path: dist/bin/psp-migration-alpine-arm64
      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-alpine-x64
          path: dist/bin/psp-migration-alpine-x64

      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-linux-arm64
          path: dist/bin/psp-migration-linux-arm64
      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-linux-x64
          path: dist/bin/psp-migration-linux-x64

      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-linuxstatic-arm64
          path: dist/bin/psp-migration-linuxstatic-arm64
      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-linuxstatic-x64
          path: dist/bin/psp-migration-linuxstatic-x64

      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-win-arm64
          path: dist/bin/psp-migration-win-arm64
      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-win-x64
          path: dist/bin/psp-migration-win-x64

      - uses: MOZGIII/install-ldid-action@v1
        if: steps.changes.outputs.js == 'true'
        with:
          tag: v2.1.5-procursus2
      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-macos-arm64
          path: dist/bin/psp-migration-macos-arm64
      - uses: actions/upload-artifact@v2.3.1
        if: steps.changes.outputs.js == 'true'
        with:
          name: psp-migration-macos-x64
          path: dist/bin/psp-migration-macos-x64

  e2e:
    # needs: build
    strategy:
      fail-fast: false
      matrix:
        system: 
          - gatekeeper
          - kyverno
          - kubewarden

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          submodules: true

      - uses: actions/setup-node@v2.5.0
        with:
          node-version-file: '.nvmrc'
      - run: npm install
      - run: npm run build:tsc
      # - uses: actions/download-artifact@v2
      #   id: download
      #   with:
      #     name: psp-migration-linux-arm64
      #     path: path/to/artifacts

      # - name: 'Echo download path'
      #   run: echo ${{steps.download.outputs.download-path}}

      - uses: container-tools/kind-action@v1.7.0
        timeout-minutes: 5
        with: 
          kubectl_version: v1.22.2
          registry: false
          config: tests/kind-config-${{matrix.system}}.yaml

      - uses: azure/setup-helm@v1.1
        with:
          version: 'v3.7.1'

      - if: matrix.system == 'gatekeeper'
        name: Install gatekeeper
        run: |
          kubectl apply --wait -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.7/deploy/gatekeeper.yaml
          kubectl wait --for=condition=available --timeout=600s  -n gatekeeper-system \
            deployment/gatekeeper-audit \
            deployment/gatekeeper-controller-manager
          kubectl apply --wait -k submodules/gatekeeper-library/library/pod-security-policy
          kubectl apply --wait -k patched_gatekeeper_templates
          until kubectl wait --for condition=established --timeout=60s \
            crd/constrainttemplates.templates.gatekeeper.sh \
            crd/k8spspvolumetypes.constraints.gatekeeper.sh
          do
            sleep 1
          done
          kubectl cordon kind-control-plane

      - if: matrix.system == 'kubewarden' 
        name: Install kubewarden
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add kubewarden https://charts.kubewarden.io
          helm repo update
          helm install --wait \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.5.3 \
            --set installCRDs=true
          helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds
          helm install --wait -n \
            kubewarden kubewarden-controller kubewarden/kubewarden-controller \
            --set policyServer.replicaCount=1 \
            --set policyServer.image.tag=latest@sha256:4d8e85e830b092f84a1005429077d0987945ca27324d97b6e90994730876605d
          # kubectl -n kubewarden patch deployment policy-server-default --type json --patch '[
          #   {"op": "replace", "path": "/spec/strategy", "value": {"type": "Recreate"}},
          #   {"op": "replace", "path": "/spec/template/spec/containers/0/readinessProbe/failureThreshold", "value": 1},
          #   {"op": "replace", "path": "/spec/template/spec/containers/0/readinessProbe/periodSeconds", "value": 1},
          #   {"op": "replace", "path": "/spec/template/spec/containers/0/imagePullPolicy", "value": "IfNotPresent"},
          #   {"op": "replace", "path": "/spec/template/spec/terminationGracePeriodSeconds", "value": 1}
          #   ]'

      - if: matrix.system == 'kyverno'
        name: Install kyverno
        run: |
          kubectl apply --wait -k kyverno-install
          # kubectl apply --wait -k github.com/kyverno/kyverno/config
          kubectl wait --for=condition=available --timeout=600s  -n kyverno \
            deployment/kyverno
          kubectl cordon kind-control-plane

      - name: BATS tests
        run: submodules/bats/bin/bats --report-formatter junit tests
        env:
          SYSTEM: ${{ matrix.system }}
          E2E_TEST: "true"

      - name: Test Report
        uses: dorny/test-reporter@v1.5.0
        if: always()
        with:
          name: E2E Test results (${{ matrix.system }})
          path: report.xml
          reporter: java-junit