name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  js-get-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          submodules: true
      - uses: actions/setup-node@v2.5.0
        with:
          node-version-file: '.nvmrc'
      - run: npm install

      - name: Tar files
        run: tar -cf codebase.tar ./
      - uses: actions/upload-artifact@v2.3.1
        with:
          name: codebase.tar
          path: codebase.tar


  js-units:
    runs-on: ubuntu-latest
    needs: js-get-deps
    steps:
      - uses: actions/download-artifact@v2.1.0
        with:
          name: codebase.tar
      - name: Untar files
        run: tar -xf codebase.tar ./ && ls -lash
      - uses: actions/setup-node@v2.5.0
        with:
          node-version-file: '.nvmrc'
      - run: npm run ci-test
      - uses: tanmen/jest-reporter@v1
        if: always()
        with:
          name: Jest Unit Test Results
          github-token: ${{ secrets.GITHUB_TOKEN }}

  js-build:
    runs-on: ubuntu-latest
    needs: js-get-deps
    steps:
      - uses: actions/download-artifact@v2.1.0
        with:
          name: codebase.tar
      - name: Untar files
        run: tar -xf codebase.tar ./ && ls -lash
      - uses: actions/setup-node@v2.5.0
        with:
          node-version-file: '.nvmrc'

      - uses: MOZGIII/install-ldid-action@v1
        with:
          tag: v2.1.5-procursus2

      - run: npm run build

      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-alpine-arm64
          path: dist/bin/psp-migration-alpine-arm64
      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-alpine-x64
          path: dist/bin/psp-migration-alpine-x64

      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-linux-arm64
          path: dist/bin/psp-migration-linux-arm64
      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-linux-x64
          path: dist/bin/psp-migration-linux-x64

      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-linuxstatic-arm64
          path: dist/bin/psp-migration-linuxstatic-arm64
      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-linuxstatic-x64
          path: dist/bin/psp-migration-linuxstatic-x64

      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-win-arm64.exe
          path: dist/bin/psp-migration-win-arm64.exe
      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-win-x64.exe
          path: dist/bin/psp-migration-win-x64.exe

      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-macos-arm64
          path: dist/bin/psp-migration-macos-arm64
      - uses: actions/upload-artifact@v2.3.1
        with:
          name: psp-migration-macos-x64
          path: dist/bin/psp-migration-macos-x64


  policytests:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental || false}}

    strategy:
      fail-fast: false
      matrix:
        system: 
          - psp
          - gatekeeper
          - kyverno
          - krail
          - pss
        e2e: ["fixtures"]
        include:
          - system: kubewarden
            e2e: "e2e"
          - system: gatekeeper
            e2e: "e2e"
          - system: kyverno
            e2e: "e2e"

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          submodules: true

      - uses: actions/setup-node@v2.5.0
        if: matrix.e2e == 'e2e'
        with:
          node-version-file: '.nvmrc'

      - name: Node install and build
        if: matrix.e2e == 'e2e'
        run: |
          npm install 
          npm run build:tsc

      - uses: container-tools/kind-action@v1.7.0
        timeout-minutes: 5
        with: 
          kubectl_version: v1.22.2
          registry: false
          config: tests/kind-config-${{matrix.system}}.yaml

      - uses: azure/setup-helm@v1.1
        with:
          version: 'v3.7.1'

      - if: matrix.system == 'gatekeeper'
        name: Install gatekeeper
        run: |
          kubectl apply --wait -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.7/deploy/gatekeeper.yaml
          kubectl wait --for=condition=available --timeout=600s  -n gatekeeper-system \
            deployment/gatekeeper-audit \
            deployment/gatekeeper-controller-manager
          kubectl apply --wait -k submodules/gatekeeper-library/library/pod-security-policy
          kubectl apply --wait -k patched_gatekeeper_templates
          until kubectl wait --for condition=established --timeout=60s \
            crd/constrainttemplates.templates.gatekeeper.sh \
            crd/k8spspvolumetypes.constraints.gatekeeper.sh
          do
            sleep 1
          done
          kubectl cordon kind-control-plane

      - if: matrix.system == 'kubewarden'
        name: Install kubewarden
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add kubewarden https://charts.kubewarden.io
          helm repo update
          helm install --wait \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.5.3 \
            --set installCRDs=true
          helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds
          helm install --wait -n \
            kubewarden kubewarden-controller kubewarden/kubewarden-controller \
            --set policyServer.replicaCount=1 \
            --set policyServer.image.tag=latest@sha256:4d8e85e830b092f84a1005429077d0987945ca27324d97b6e90994730876605d

      - if: matrix.system == 'kyverno'
        name: Install kyverno
        run: |
          kubectl apply --wait -k kyverno-install
          # kubectl apply --wait -k github.com/kyverno/kyverno/config
          kubectl wait --for=condition=available --timeout=600s  -n kyverno \
            deployment/kyverno
          kubectl cordon kind-control-plane

      - if: matrix.system == 'krail'
        name: Install k-rail
        run: |
          helm repo add k-rail https://cruise-automation.github.io/k-rail/
          helm repo update
          kubectl create namespace k-rail
          kubectl label namespace k-rail k-rail/ignore=true
          helm install --wait --set webhookTimeout=30 --set replicaCount=1 k-rail k-rail/k-rail --namespace k-rail

      - name: BATS tests
        # continue-on-error: ${{ matrix.system == 'kubewarden' || matrix.system == 'pss' || matrix.system == 'krail'}}
        run: submodules/bats/bin/bats --report-formatter junit tests
        env:
          SYSTEM: ${{ matrix.system }}
          E2E_TEST: ${{ matrix.e2e == 'e2e' }}

      - name: Test Report
        # continue-on-error: ${{ matrix.system == 'kubewarden' || matrix.system == 'pss' || matrix.system == 'krail'}}
        uses: dorny/test-reporter@v1.5.0
        if: always()
        with:
          name: Test results (${{ matrix.system }}) ${{ matrix.e2e == 'e2e' && 'end-to-end' || 'static policy'}}
          path: report.xml
          reporter: java-junit
          fail-on-error: false