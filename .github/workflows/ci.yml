name: Policy Fixture Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        system: 
          - psp
          - gatekeeper
          - kyverno
        experimental: [false]
        include:
          - system: kubewarden
            experimental: true
          - system: krail
            experimental: true
          - system: pss
            experimental: true

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          submodules: true

      - uses: dorny/paths-filter@v2.10.2
        id: changes
        with:
          filters: |
            psp:
              - tests/**
              - submodules/**
              - patched_gatekeeper_templates/**

      - uses: container-tools/kind-action@v1.7.0
        if: steps.changes.outputs.psp == 'true'
        timeout-minutes: 5
        with: 
          kubectl_version: v1.22.2
          registry: false
          config: tests/kind-config-${{matrix.system}}.yaml

      - uses: azure/setup-helm@v1.1
        if: steps.changes.outputs.psp == 'true'
        with:
          version: 'v3.7.1'

      - if: matrix.system == 'gatekeeper' && steps.changes.outputs.psp == 'true'
        name: Install gatekeeper
        run: |
          kubectl apply --wait -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.7/deploy/gatekeeper.yaml
          kubectl wait --for=condition=available --timeout=600s  -n gatekeeper-system \
            deployment/gatekeeper-audit \
            deployment/gatekeeper-controller-manager
          kubectl apply --wait -k submodules/gatekeeper-library/library/pod-security-policy
          kubectl apply --wait -k patched_gatekeeper_templates
          until kubectl wait --for condition=established --timeout=60s \
            crd/constrainttemplates.templates.gatekeeper.sh \
            crd/k8spspvolumetypes.constraints.gatekeeper.sh
          do
            sleep 1
          done
          kubectl cordon kind-control-plane

      - if: matrix.system == 'kubewarden' && steps.changes.outputs.psp == 'true'
        name: Install kubewarden
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add kubewarden https://charts.kubewarden.io
          helm repo update
          helm install --wait \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.5.3 \
            --set installCRDs=true
          helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds
          helm install --wait -n \
            kubewarden kubewarden-controller kubewarden/kubewarden-controller \
            --set policyServer.replicaCount=1 \
            --set policyServer.image.tag=latest@sha256:4d8e85e830b092f84a1005429077d0987945ca27324d97b6e90994730876605d
          kubectl -n kubewarden patch deployment policy-server-default --type json --patch '[
            {"op": "replace", "path": "/spec/strategy", "value": {"type": "Recreate"}},
            {"op": "replace", "path": "/spec/template/spec/containers/0/readinessProbe/failureThreshold", "value": 1},
            {"op": "replace", "path": "/spec/template/spec/containers/0/readinessProbe/periodSeconds", "value": 1},
            {"op": "replace", "path": "/spec/template/spec/containers/0/imagePullPolicy", "value": "IfNotPresent"},
            {"op": "replace", "path": "/spec/template/spec/terminationGracePeriodSeconds", "value": 1}
            ]'

      - if: matrix.system == 'kyverno' && steps.changes.outputs.psp == 'true'
        name: Install kyverno
        run: |
          kubectl apply --wait -k kyverno-install
          # kubectl apply --wait -k github.com/kyverno/kyverno/config
          kubectl wait --for=condition=available --timeout=600s  -n kyverno \
            deployment/kyverno
          kubectl cordon kind-control-plane

      - if: matrix.system == 'krail' && steps.changes.outputs.psp == 'true'
        name: Install k-rail
        run: |
          helm repo add k-rail https://cruise-automation.github.io/k-rail/
          helm repo update
          kubectl create namespace k-rail
          kubectl label namespace k-rail k-rail/ignore=true
          helm install --wait --set webhookTimeout=30 --set replicaCount=1 k-rail k-rail/k-rail --namespace k-rail

      - name: BATS tests
        if: steps.changes.outputs.psp == 'true'
        run: submodules/bats/bin/bats --report-formatter junit tests
        env:
          SYSTEM: ${{ matrix.system }}

      - name: Test Report
        uses: dorny/test-reporter@v1.5.0
        if: steps.changes.outputs.psp == 'true' && always()
        with:
          name: Test results (${{ matrix.system }})
          path: report.xml
          reporter: java-junit